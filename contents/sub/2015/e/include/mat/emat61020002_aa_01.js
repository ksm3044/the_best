(function (cjs, an) {

var p; // shortcut to reference prototypes
var lib={};var ss={};var img={};
lib.ssMetadata = [
		{name:"emat61020002_aa_01_atlas_1", frames: [[0,1082,465,465],[0,0,1920,1080]]},
		{name:"emat61020002_aa_01_atlas_2", frames: [[0,0,1920,1080]]}
];


(lib.AnMovieClip = function(){
	this.actionFrames = [];
	this.ignorePause = false;
	this.gotoAndPlay = function(positionOrLabel){
		cjs.MovieClip.prototype.gotoAndPlay.call(this,positionOrLabel);
	}
	this.play = function(){
		cjs.MovieClip.prototype.play.call(this);
	}
	this.gotoAndStop = function(positionOrLabel){
		cjs.MovieClip.prototype.gotoAndStop.call(this,positionOrLabel);
	}
	this.stop = function(){
		cjs.MovieClip.prototype.stop.call(this);
	}
}).prototype = p = new cjs.MovieClip();
// symbols:



(lib.CachedBmp_1 = function() {
	this.initialize(ss["emat61020002_aa_01_atlas_1"]);
	this.gotoAndStop(0);
}).prototype = p = new cjs.Sprite();



(lib.인터렉션1 = function() {
	this.initialize(ss["emat61020002_aa_01_atlas_2"]);
	this.gotoAndStop(0);
}).prototype = p = new cjs.Sprite();



(lib.인터렉션2 = function() {
	this.initialize(ss["emat61020002_aa_01_atlas_1"]);
	this.gotoAndStop(1);
}).prototype = p = new cjs.Sprite();
// helper functions:

function mc_symbol_clone() {
	var clone = this._cloneProps(new this.constructor(this.mode, this.startPosition, this.loop, this.reversed));
	clone.gotoAndStop(this.currentFrame);
	clone.paused = this.paused;
	clone.framerate = this.framerate;
	return clone;
}

function getMCSymbolPrototype(symbol, nominalBounds, frameBounds) {
	var prototype = cjs.extend(symbol, cjs.MovieClip);
	prototype.clone = mc_symbol_clone;
	prototype.nominalBounds = nominalBounds;
	prototype.frameBounds = frameBounds;
	return prototype;
	}


(lib.an_Video = function(options) {
	this.initialize();
	this._element = new $.an.Video(options);
	this._el = this._element.create();
}).prototype = p = new cjs.MovieClip();
p.nominalBounds = new cjs.Rectangle(0,0,400,300);

p._tick = _tick;
p._handleDrawEnd = _handleDrawEnd;
p._updateVisibility = _updateVisibility;
p.draw = _componentDraw;



(lib.triangleBgLast = function(mode,startPosition,loop,reversed) {
if (loop == null) { loop = true; }
if (reversed == null) { reversed = false; }
	var props = new Object();
	props.mode = mode;
	props.startPosition = startPosition;
	props.labels = {};
	props.loop = loop;
	props.reversed = reversed;
	cjs.MovieClip.apply(this,[props]);

	// Layer_1
	this.instance = new lib.인터렉션1();

	this.timeline.addTween(cjs.Tween.get(this.instance).wait(1));

	this._renderFirstFrame();

}).prototype = getMCSymbolPrototype(lib.triangleBgLast, new cjs.Rectangle(0,0,1920,1080), null);


(lib.rectangleBgLast = function(mode,startPosition,loop,reversed) {
if (loop == null) { loop = true; }
if (reversed == null) { reversed = false; }
	var props = new Object();
	props.mode = mode;
	props.startPosition = startPosition;
	props.labels = {};
	props.loop = loop;
	props.reversed = reversed;
	cjs.MovieClip.apply(this,[props]);

	// Layer_1
	this.instance = new lib.인터렉션2();

	this.timeline.addTween(cjs.Tween.get(this.instance).wait(1));

	this._renderFirstFrame();

}).prototype = getMCSymbolPrototype(lib.rectangleBgLast, new cjs.Rectangle(0,0,1920,1080), null);


(lib.ClipGroup = function(mode,startPosition,loop,reversed) {
if (loop == null) { loop = true; }
if (reversed == null) { reversed = false; }
	var props = new Object();
	props.mode = mode;
	props.startPosition = startPosition;
	props.labels = {};
	props.loop = loop;
	props.reversed = reversed;
	cjs.MovieClip.apply(this,[props]);

	// Layer_2 (mask)
	var mask = new cjs.Shape();
	mask._off = true;
	mask.graphics.p("AyJSKMAAAgkTMAkTAAAMAAAAkTg");
	mask.setTransform(116.2,116.2);

	// Layer_3
	this.instance = new lib.CachedBmp_1();
	this.instance.setTransform(0,0,0.5,0.5);

	var maskedShapeInstanceList = [this.instance];

	for(var shapedInstanceItr = 0; shapedInstanceItr < maskedShapeInstanceList.length; shapedInstanceItr++) {
		maskedShapeInstanceList[shapedInstanceItr].mask = mask;
	}

	this.timeline.addTween(cjs.Tween.get(this.instance).wait(1));

	this._renderFirstFrame();

}).prototype = getMCSymbolPrototype(lib.ClipGroup, new cjs.Rectangle(0,0,232.4,232.4), null);


(lib.playBtn = function(mode,startPosition,loop,reversed) {
if (loop == null) { loop = true; }
if (reversed == null) { reversed = false; }
	var props = new Object();
	props.mode = mode;
	props.startPosition = startPosition;
	props.labels = {};
	props.loop = loop;
	props.reversed = reversed;
	cjs.MovieClip.apply(this,[props]);

	// Layer_1
	this.instance = new lib.ClipGroup();
	this.instance.setTransform(116.2,116.2,1,1,0,0,0,116.2,116.2);

	this.timeline.addTween(cjs.Tween.get(this.instance).wait(1));

	this._renderFirstFrame();

}).prototype = p = new cjs.MovieClip();
p.nominalBounds = new cjs.Rectangle(0,0,232.5,232.5);


// stage content:
(lib.RotateTriangle2Shape = function(mode,startPosition,loop,reversed) {
if (loop == null) { loop = true; }
if (reversed == null) { reversed = false; }
	var props = new Object();
	props.mode = mode;
	props.startPosition = startPosition;
	props.labels = {};
	props.loop = loop;
	props.reversed = reversed;
	cjs.MovieClip.apply(this,[props]);

	this.actionFrames = [0];
	this.isSingleFrame = false;
	// timeline functions:
	this.frame_0 = function() {
		if(this.isSingleFrame) {
			return;
		}
		if(this.totalFrames == 1) {
			this.isSingleFrame = true;
		}
		canvas.style.zIndex = "1";
		
		const root = this;
		const elm = {
			button: {
				start: this.playBtn,
				reload: {
					angle3: 		this.showTriangle,
					angle4:			this.showRectangle1,
					angle5: 		this.showRectangle2
				}
			},
			title: {
				angle3: 		null,
				angle4:			null,
				angle5:			null,
				base64: {
					angle4: '',
					angle3: '',
					angle5: ''
				}
			},
			coordTriangle: 		false,
			canvas3Angle: 		null,
			canvas4Angle: 		null,
			countdownVid: 		this.countdownVid,
			countdown: 			null,
			triangleBg: 		this.triangleBg,
			rectangleBg:		this.rectangleBg,
			stages: {
				triangle: 			null,
				rectangle: 			null
			},
			rotateObj: 			null,
			selectedObj: 		[]
		}
		
		const params = {
			camera: 6,
			renderer: null,
			controls: null,
			scenes: {},
			cursor: {
				x: 		0,
				y: 		0,
				dx: 	0,
				dy: 	0
			},
			find: {
				triangle	: 		null,
				rectangle	:		null 
			},
			renderer: {
				width: 		null,
				height:		null
			},
			selectedCamera: 		null
		};
		
		const methods = {
			calcSize: function() {
				const vid = document.querySelector('#canvas');
				if (vid) {
					return [vid.clientWidth, vid.clientHeight]
				}
				
				
				let width, height;
				const ratio = 1.777777777777778;
				if (window.innerWidth >= 1920 && window.innerHeight >= 1080) {
					width = 1920;
					height = 1080;
				} else {
					if (window.innerWidth > window.innerHeight) {
						height = window.innerHeight;
						width = window.innerHeight * ratio;
					} else {
						width = window.innerWidth;
						height = window.innerWidth / ratio;
					}
				}
				return [width, height];
			},
			initVisible: function() {
				elm.countdownVid.visible = false;
				elm.triangleBg.visible = false;
				elm.rectangleBg.visible = false;
				elm.button.reload.angle3.visible = false;
				elm.button.reload.angle4.visible = false;
				elm.button.reload.angle5.visible = false;
			},
			makeScene: function(elem, integ) {
				const scene = new THREE.Scene();
				const size = methods.calcSize();
				const camera = new THREE.PerspectiveCamera( integ, size[0] / size[1], 0.1, 1000 );
				
				if (elem === '#angle4') {
					params.selectedCamera = camera;
				}
				
				camera.position.z = params.camera;
				params.scenes[elem] = scene;
				scene.elmId = elem;
				
				//const helper = new THREE.DirectionalLightHelper( light, 5 );
				//group.add( helper );
				
				
				return {scene, camera, elem};
			},
			init3d: function() {
				
				const param = [
					{
						selector: '#angle3',
						radius: 1.4,
						camera: 50,
						obj: [{
							height: 2.5,
							angle: 3,
							color: '#5B9FCA'
						}]
					},
					{
						selector: '#angle4',
						radius: 1.2,
						camera: 70,
						obj: [{
							height: 2.5,
							angle: 4,
							color: '#482C91',
							position: {
								x: -1.7,
								y: 0,
								z: 0
							}
						}, {
							height: 2,
							angle: 5,
							color: '#BA318D',
							position: {
								x: 1.7,
								y: 0,
								z: 0
							}
						}]
					}
				];
				
				
				param.forEach(elm => {
					const info = methods.makeScene(elm.selector, elm.camera);
					elm.obj.forEach(child => {
						const group = new THREE.Group();
						const geometry = new THREE.CylinderGeometry(elm.radius, elm.radius, child.height, child.angle);
						const material = new THREE.MeshStandardMaterial({ color: child.color, emissive: child.color });
						const mesh = new THREE.Mesh(geometry, material);
						
						
						let check = false;
						
						const light = new THREE.DirectionalLight( 0xffffff, 0.4 );
						light.position.set(1,5, 1, 0)
						group.add( light );
						
						
						group.add(mesh);
						info.scene.add(group);
						
						if (child.position) {
							group.position.x = child.position.x;
							group.position.y = child.position.y;
							group.position.z = child.position.z;
						}
						
					});
					
					console.log(info.scene, '====');
					methods.renderSceneInfo(info);
				});
				
			},
			
			renderSceneInfo: function(sceneInfo) {
				const {scene, camera, elem} = sceneInfo;
				const renderer = new THREE.WebGLRenderer();
				renderer.setClearColor( '#000', 0.4);
				const size = methods.calcSize();
				renderer.setSize(size[0], size[1]);
				document.querySelector(elem).appendChild(renderer.domElement);
				params.controls = new THREE.OrbitControls(camera, renderer.domElement);
				params.controls.enabled = false;
				params.renderer.width = renderer.domElement.width;
				params.renderer.height = renderer.domElement.height; 
				
				
				window.addEventListener('resize', function() {
					console.log(window.innerWidth);
						const size = methods.calcSize();
						sceneInfo.camera.aspect = size[0] / size[1]
						sceneInfo.camera.updateProjectionMatrix()
						renderer.setSize(size[0], size[1]);
						render()
					
					const elm5 = document.querySelector('#angle5Title');
					if (elm5) {
						elm5.style.left = 'calc(' + size[0] + 'px - 25vw)';
					}
				}, false)
				
				function animate() {
		          requestAnimationFrame(animate)
					if (scene.elmId === '#angle3') {
						if (params.find.triangle) {
							const el = params.scenes['#' + elm.stages.triangle.id];
							if (!el) {
								return;
							}
							
							const obj = el.children[0];
							if (obj.direction == 'up') {
								if (obj.rotation.x < 1.55) {
								  obj.rotation.x += 0.01;
								}
							  } else {
								  if (obj.rotation.x > -1.55) {
									obj.rotation.x -= 0.01;
								  }
							  }
						  }
					} else {
						if (params.find.rectangle) {
							const el = params.scenes['#' + elm.stages.rectangle.id];
							
							if (!el) {
								return;
							}
							
							const obj = el.children[0];
							if (obj.direction == 'up') {
								if (obj.rotation.x < 1.55) {
								  obj.rotation.x += 0.01;
								}
							} else {
								  if (obj.rotation.x > -1.55) {
									obj.rotation.x -= 0.01;
								}
							}
							
							
							const obj2 = el.children[1];
							if (obj2.direction == 'up') {
								if (obj2.rotation.x < 1.55) {
								  obj2.rotation.x += 0.01;
								}
							} else {
								  if (obj2.rotation.x > -1.55) {
									obj2.rotation.x -= 0.01;
								}
							}
						}
					}
		          render();
				}
				
				function render() {
		          renderer.render(scene, camera)
				}
				
				animate();
			},
			removeCountDown: function(currentId, root) {
				const obj = document.getElementById('countdownVid');
				
				if (!obj) {
					return;
				}
				
				obj.parentElement.style.display = 'none';
				obj.pause();
				createjs.Sound.stop('countDownSound');
				obj.removeEventListener('ended', handlers.countDown);	
				
				const curr = document.querySelector(currentId);
				if (curr) {
					curr.style.pointerEvents = 'none';
				}
				
				methods.hideCanvas(currentId, root);
			},
			hideCanvas: function(currentId, root) {
				
				if (currentId === '#angle3') {
					root.MainVideoId.currentTime = 80.8;
					createjs.Sound.play('triangleSound');
					setTimeout(function() {
						const elem = document.querySelector('#angle3');
						elem.style.display = 'none';
						elm.triangleBg.visible = false;
						elm.title.angle3.style.display = 'none';
						root.MainVideoId.play();
					}, 4000);
				} else {
					root.MainVideoId.currentTime = 130.1;
					createjs.Sound.play('rectangleSound');
					setTimeout(function() {
						const elem = document.querySelector('#angle4');
						elem.style.display = 'none';
						elm.title.angle4.style.display = 'none';
						elm.title.angle5.style.display = 'none';
						elm.rectangleBg.visible = false;
						root.MainVideoId.play();
					}, 6000);
				}
			},
			checkSelectedObj: function(obj) {
				let result = false;
				elm.selectedObj.forEach(elm => {
					elm == obj ? result = true : null;
				});
				
				return result;
			}
		};
		
		
		const handlers = {
			countDown: function (event) {
				event.currentTarget.parentElement.style.display = 'none';
				const elem = document.querySelector('#angle3');
				elem.style.pointerEvents = 'none';
				
				if (elem.style.display == 'block') {
					
					const el = params.scenes['#' + elm.stages.triangle.id];
					if (!el) {
						return;
					}
					
					const obj = el.children[0];
					
					if (obj.rotation.x > 0) {
						obj.direction = 'up'
					} else {
						obj.direction = 'down'
					}
					
					params.find.triangle = true;
					
					setTimeout(function() {
						elm.title.angle3.style.display = 'block';
						methods.removeCountDown('#angle3', this);
					}, 2000);
					
		
				} else {
					const elem = document.querySelector('#angle4');
					elem.style.pointerEvents = 'none';
					
					const el = params.scenes['#' + elm.stages.rectangle.id];
					
					if (!el) {
						return;
					}
					
					const obj = el.children[0];
					
					if (obj.rotation.x > 0) {
						obj.direction = 'up'
					} else {
						obj.direction = 'down'
					}
					
					
					obj2 = el.children[1];
					
					if (obj2.rotation.x > 0) {
						obj2.direction = 'up'
					} else {
						obj2.direction = 'down'
					}
					
					params.find.rectangle = true;
					
					setTimeout(function() {
						elm.title.angle4.style.display = 'block';
						elm.title.angle5.style.display = 'block';
						methods.removeCountDown('#angle4', this);
					}, 2000);
				}
				
			},
			updateVid: function(event) {
				const vid = event.currentTarget;
				if (vid.currentTime > 78 && vid.currentTime < 79) {
					vid.pause();
					elm.button.reload.angle3.visible = true;
				}
				
				if (vid.currentTime > 128 && vid.currentTime < 129) {
					vid.pause();
					elm.button.reload.angle4.visible = true;
					elm.button.reload.angle5.visible = true;
				}
			},
			showTrianleCoord: function(event) {
				event.currentTarget.visible = false;
				const elem = document.querySelector('#angle3');
				handlers.createStage();
				elem.style.display = 'block';
				elm.triangleBg.visible = true;
				
				
				const obj = document.getElementById('countdownVid');
				obj.parentElement.style.display = 'block';
				obj.currentTime = 0;
				obj.play();
				createjs.Sound.play('countDownSound');
				obj.addEventListener('ended', handlers.countDown.bind(this));
		
			},
			showRectangleCoord: function(event) {
				const elem = document.querySelector('#angle4');
				handlers.createStage();
				elem.style.display = 'block';
				elm.rectangleBg.visible = true;
				
				
				const obj = document.getElementById('countdownVid');
				obj.parentElement.style.display = 'block';
				obj.currentTime = 0;
				obj.play();
				createjs.Sound.play('countDownSound');
				obj.addEventListener('ended', handlers.countDown.bind(this));
				
				elm.button.reload.angle4.visible = false;
				elm.button.reload.angle5.visible = false;
		
			},
			angle3MouseDown: function(event) {
				elm.canvas3Angle.style.cursor = 'grabbing';
				event.currentTarget.addEventListener("stagemousemove", handlers.angle3MouseMove);
				event.currentTarget.addEventListener("stagemouseup", handlers.angle3MouseUp);
			},
			angle4MouseDown: function(event) {
				
				var raycaster = new THREE.Raycaster();
				var mouse = {};
			    mouse.x = ( event.stageX / params.renderer.width) * 2 - 1;
		        mouse.y = - ( event.stageY / params.renderer.height ) * 2 + 1;
			    raycaster.setFromCamera( mouse, params.selectedCamera );
				
			    var intersects = raycaster.intersectObjects( params.scenes['#angle4'].children );
				if (intersects.length > 0) {
					if (!methods.checkSelectedObj(intersects[0].object.parent.uuid)) {
						elm.rotateObj = intersects[0].object.parent;
					}
				}
				
				elm.canvas4Angle.style.cursor = 'grabbing';
				event.currentTarget.addEventListener("stagemousemove", handlers.angle4MouseMove);
				event.currentTarget.addEventListener("stagemouseup", handlers.angle4MouseUp);
			},
			angle4MouseUp: function(event) {
				elm.canvas4Angle.style.cursor = 'grab';
				elm.rotateObj = null;
				const id = event.currentTarget.id;
				if (!id) {
					return;
				}
				
				if (id === 'angle3') {
					return;
				} 
				
				
				
				const el = params.scenes['#' + id];
				if (!el) {
					return;
				}
				
				
				let obj = el.children;
				if (obj[0].rotation.x > 1.45 || obj[0].rotation.x < -1.45) {
					if (!methods.checkSelectedObj(obj[0].uuid)) {
						elm.selectedObj.push(obj[0].uuid);
					}
					
					elm.title.angle4.style.display = 'block';
				}
				
				if (obj[1].rotation.x > 1.45 || obj[1].rotation.x < -1.45) {
					if (!methods.checkSelectedObj(obj[1].uuid)) {
						elm.selectedObj.push(obj[1].uuid);
					}
					
					elm.title.angle5.style.display = 'block';
				}
				
				console.log(elm.selectedObj);
				if (methods.checkSelectedObj(obj[0].uuid) && methods.checkSelectedObj(obj[1].uuid)) {
					methods.removeCountDown('#angle4', this);
				}
				
				
				
				event.currentTarget.removeEventListener("stagemousemove", handlers.angle4MouseMove);
				event.currentTarget.removeEventListener("stagemouseup", handlers.angle4MouseUp);
			},
			angle4MouseMove: function(event) {
				
				if (!elm.rotateObj) {
					return;
				}
				
				
				if (params.cursor.dx > event.stageX) {
					if (elm.rotateObj.rotation.y > -3.1) {
						elm.rotateObj.rotation.y -= 0.04;
					}
				} else {
					if (elm.rotateObj.rotation.y < 3.1) {
						elm.rotateObj.rotation.y += 0.04;
					}
				}
				
				if (params.cursor.dy > event.stageY) {
					if (elm.rotateObj.rotation.x > -1.55) {
						elm.rotateObj.rotation.x -= 0.03;
					}
				} else {
					if (elm.rotateObj.rotation.x < 1.55) {
						elm.rotateObj.rotation.x += 0.03;
					}
				}
				
				params.cursor.dx = event.stageX;
				params.cursor.dy = event.stageY;
			},
			angle3MouseMove: function(event) {
				const id = event.currentTarget.id;
				if (!id) {
					return;
				}
				
				if (id !== 'angle3') {
					return;
				} 
				
				
				
				const el = params.scenes['#' + id];
				if (!el) {
					return;
				}
				
				const obj = el.children[0];
				
				if (params.cursor.dx > event.stageX) {
					if (obj.rotation.y > -3.1) {
						obj.rotation.y -= 0.04;
					}
				} else {
					if (obj.rotation.y < 3.1) {
						obj.rotation.y += 0.04;
					}
				}
				
				if (params.cursor.dy > event.stageY) {
					if (obj.rotation.x > -1.55) {
						obj.rotation.x -= 0.03;
					}
				} else {
					if (obj.rotation.x < 1.55) {
						obj.rotation.x += 0.03;
					}
				}
				
				params.cursor.dx = event.stageX;
				params.cursor.dy = event.stageY;
			},
			angle3MouseUp: function(event) {
				elm.canvas3Angle.style.cursor = 'grab';
				
				const id = event.currentTarget.id;
				if (!id) {
					return;
				}
				
				if (id !== 'angle3') {
					return;
				} 
				
				
				
				const el = params.scenes['#' + id];
				if (!el) {
					return;
				}
				
				const obj = el.children[0];
				
				if (obj.rotation.x > 1.45 || obj.rotation.x < -1.45) {
					elm.title.angle3.style.display = 'block';
					methods.removeCountDown('#angle3', this);
				}
				
				event.currentTarget.removeEventListener("stagemousemove", handlers.angle3MouseMove);
				event.currentTarget.removeEventListener("stagemouseup", handlers.angle3MouseUp);
			},
			createStage: function() {
				if (!elm.stages.triangle) {
					const can = elm.canvas3Angle.querySelector('canvas');
					elm.stages.triangle = new createjs.Stage(can);
					createjs.Touch.enable(elm.stages.triangle);
					elm.stages.triangle.id = 'angle3';
					elm.stages.triangle.addEventListener("stagemousedown", handlers.angle3MouseDown);
				}
				
				if (!elm.stages.rectangle) {
					const can2 = elm.canvas4Angle.querySelector('canvas');
					elm.stages.rectangle = new createjs.Stage(can2);
					createjs.Touch.enable(elm.stages.rectangle);
					elm.stages.rectangle.id = 'angle4';
					elm.stages.rectangle.addEventListener("stagemousedown", handlers.angle4MouseDown);
				}
			},
		};
		
		
		methods.initVisible();
		const bind = function() {
			
			const param = document.createElement("div");	
			param.id = 'angle3';
			param.style.position = 'absolute';
			param.style.top = '0';
			param.style.left = '0';
			const size = methods.calcSize();
			param.style.width = size[0] + 'px';
			param.style.height = size[1] + 'px';
			param.style.zIndex = '2';
			param.style.display = 'none';
			param.style.cursor = 'grab';
			document.body.appendChild(param);
			elm.canvas3Angle = param;
			
			const param2 = document.createElement("div");	
			param2.id = 'angle4';
			param2.style.position = 'absolute';
			param2.style.top = '0';
			param2.style.left = '0';
			param2.style.width = size[0] + 'px';
			param2.style.height = size[1] + 'px';
			param2.style.zIndex = '2';
			param2.style.display = 'none';
			param.style.cursor = 'grab';
			document.body.appendChild(param2);
			elm.canvas4Angle = param2;
			
			console.log(size, '===');
			const svg = document.createElement("div");
			svg.id = "angle4Title";
			svg.style.position = 'absolute';
			let html = '';
			html = '<img src="data:image/png;base64,'+ elm.title.base64.angle4 +'" style="width: 100%; height: auto;"/>';
			
			svg.innerHTML = html;
			svg.style.top = '8vh';
			svg.style.width = '20vw';
			svg.style.left = '8vw';
			svg.style.display = 'none';
			svg.style.zIndex = '20';
			document.body.appendChild(svg);
			elm.title.angle4 = svg;
			
			
			
			const svg2 = document.createElement("div");
			svg2.id = "angle3Title";
			svg2.style.position = 'absolute';
			html = '<img src="data:image/png;base64,'+ elm.title.base64.angle3 +'" style="width: 100%; height: auto;"/>';
			
			svg2.style.width = '20vw';
			svg2.innerHTML = html;
			svg2.style.top = '8vw';
			svg2.style.left = (size[0] - 600) + 'px';	
			svg2.style.left = '65vw';
			
			svg2.style.display = 'none';
			svg2.style.zIndex = '20';
			document.body.appendChild(svg2);
			elm.title.angle3= svg2;
			
			
			
			
			const svg3 = document.createElement("div");
			svg3.id = "angle5Title";
			svg3.style.position = 'absolute';
			html = '<img src="data:image/png;base64,'+ elm.title.base64.angle5 +'" style="width: 100%; height: auto;"/>';
			svg3.innerHTML = html;
			svg3.style.top = '8vh';
			elm.title.angle5 = svg3;
			
			svg3.style.width = '20vw';
			svg3.style.left = 'calc(' + size[0] + 'px - 25vw)';
			svg3.style.display = 'none';
			svg3.style.zIndex = '20';
			document.body.appendChild(svg3);
		
			methods.init3d();
			//elm.title.angle3.visible = false;
			
			
			
			elm.button.reload.angle3.addEventListener('click', handlers.showTrianleCoord.bind(this));
			elm.button.reload.angle4.addEventListener('click', handlers.showRectangleCoord.bind(this));
			elm.button.reload.angle5.addEventListener('click', handlers.showRectangleCoord.bind(this));
			
				
			setTimeout(function() {
				elm.countdownVid.visible = true;
				setTimeout(function() {
					console.log(elm.title.angle3);
					const obj = document.getElementById('countdownVid');
					if (obj) {
						obj.parentElement.style.zIndex = '3';
						obj.parentElement.style.display = 'none';
					}
					
					const vid = document.querySelector('#MainVideoId');
					if (vid) {
						//vid.play();
						//vid.currentTime = 75;
						//vid.currentTime = 125;
						vid.addEventListener('timeupdate', handlers.updateVid);
					}
				}, 100);
			}, 100);
				
		}
		
		bind(this);
		this.pointerEvents = "none";
	}

	// actions tween:
	this.timeline.addTween(cjs.Tween.get(this).call(this.frame_0).wait(1));

	// Layer_1
	this.showRectangle2 = new lib.playBtn();
	this.showRectangle2.name = "showRectangle2";
	this.showRectangle2.setTransform(1322.35,353.45,0.8198,0.8196,0,0,0,105.8,116.9);
	new cjs.ButtonHelper(this.showRectangle2, 0, 1, 1);

	this.showRectangle1 = new lib.playBtn();
	this.showRectangle1.name = "showRectangle1";
	this.showRectangle1.setTransform(644.6,434,0.8196,0.8196,0,0,0,116.5,116.5);
	new cjs.ButtonHelper(this.showRectangle1, 0, 1, 1);

	this.showTriangle = new lib.playBtn();
	this.showTriangle.name = "showTriangle";
	this.showTriangle.setTransform(983.95,526,0.5483,0.5483,0,0,0,116.5,116.5);
	new cjs.ButtonHelper(this.showTriangle, 0, 1, 1);

	this.timeline.addTween(cjs.Tween.get({}).to({state:[{t:this.showTriangle},{t:this.showRectangle1},{t:this.showRectangle2}]}).wait(1));

	// video
	this.triangleBg = new lib.triangleBgLast();
	this.triangleBg.name = "triangleBg";
	this.triangleBg.setTransform(960,540,1,1,0,0,0,960,540);

	this.rectangleBg = new lib.rectangleBgLast();
	this.rectangleBg.name = "rectangleBg";
	this.rectangleBg.setTransform(960,540,1,1,0,0,0,960,540);

	this.countdownVid = new lib.an_Video({'id': 'countdownVid', 'src':'videos/n8gu2-stub3.webm', 'autoplay':false, 'controls':false, 'muted':false, 'loop':false, 'poster':'', 'preload':true, 'class':'video'});

	this.countdownVid.name = "countdownVid";
	this.countdownVid.setTransform(1579.4,93.6,1.703,1.703,0,0,0,200,150.1);

	this.MainVideoId = new lib.an_Video({'id': 'MainVideoId', 'src':'videos/수학%20각기둥의%20이름과%20구성%20요소%20알기.mp4', 'autoplay':true, 'controls':false, 'muted':false, 'loop':false, 'poster':'', 'preload':true, 'class':'video'});

	this.MainVideoId.name = "MainVideoId";
	this.MainVideoId.setTransform(960,540,4.8,3.6,0,0,0,200,150);

	this.timeline.addTween(cjs.Tween.get({}).to({state:[{t:this.MainVideoId},{t:this.countdownVid},{t:this.rectangleBg},{t:this.triangleBg}]}).wait(1));

	this._renderFirstFrame();

}).prototype = p = new lib.AnMovieClip();
p.nominalBounds = new cjs.Rectangle(957.6,377.2,964.8000000000001,704.5999999999999);
// library properties:
lib.properties = {
	id: '217690B0DA125D4D9B4A08ABB83E56EF',
	width: 1920,
	height: 1080,
	fps: 24,
	color: "#333333",
	opacity: 0.00,
	manifest: [
		{src:"images/emat61020002_aa_01_atlas_1.png", id:"emat61020002_aa_01_atlas_1"},
		{src:"images/emat61020002_aa_01_atlas_2.png", id:"emat61020002_aa_01_atlas_2"},
		{src:"sounds/ClickBtnSound.mp3", id:"ClickBtnSound"},
		{src:"sounds/countDownSound.mp3", id:"countDownSound"},
		{src:"sounds/rectangleSound.mp3", id:"rectangleSound"},
		{src:"sounds/triangleSound.mp3", id:"triangleSound"},
		{src:"https://code.jquery.com/jquery-3.4.1.min.js", id:"lib/jquery-3.4.1.min.js"},
		{src:"components/sdk/anwidget.js", id:"sdk/anwidget.js"},
		{src:"components/video/src/video.js", id:"an.Video"}
	],
	preloads: []
};



// bootstrap callback support:

(lib.Stage = function(canvas) {
	createjs.Stage.call(this, canvas);
}).prototype = p = new createjs.Stage();

p.setAutoPlay = function(autoPlay) {
	this.tickEnabled = autoPlay;
}
p.play = function() { this.tickEnabled = true; this.getChildAt(0).gotoAndPlay(this.getTimelinePosition()) }
p.stop = function(ms) { if(ms) this.seek(ms); this.tickEnabled = false; }
p.seek = function(ms) { this.tickEnabled = true; this.getChildAt(0).gotoAndStop(lib.properties.fps * ms / 1000); }
p.getDuration = function() { return this.getChildAt(0).totalFrames / lib.properties.fps * 1000; }

p.getTimelinePosition = function() { return this.getChildAt(0).currentFrame / lib.properties.fps * 1000; }

an.bootcompsLoaded = an.bootcompsLoaded || [];
if(!an.bootstrapListeners) {
	an.bootstrapListeners=[];
}

an.bootstrapCallback=function(fnCallback) {
	an.bootstrapListeners.push(fnCallback);
	if(an.bootcompsLoaded.length > 0) {
		for(var i=0; i<an.bootcompsLoaded.length; ++i) {
			fnCallback(an.bootcompsLoaded[i]);
		}
	}
};

an.compositions = an.compositions || {};
an.compositions['217690B0DA125D4D9B4A08ABB83E56EF'] = {
	getStage: function() { return exportRoot.stage; },
	getLibrary: function() { return lib; },
	getSpriteSheet: function() { return ss; },
	getImages: function() { return img; }
};

an.compositionLoaded = function(id) {
	an.bootcompsLoaded.push(id);
	for(var j=0; j<an.bootstrapListeners.length; j++) {
		an.bootstrapListeners[j](id);
	}
}

an.getComposition = function(id) {
	return an.compositions[id];
}


an.makeResponsive = function(isResp, respDim, isScale, scaleType, domContainers) {		
	var lastW, lastH, lastS=1;		
	window.addEventListener('resize', resizeCanvas);		
	resizeCanvas();		
	function resizeCanvas() {			
		var w = lib.properties.width, h = lib.properties.height;			
		var iw = window.innerWidth, ih=window.innerHeight;			
		var pRatio = window.devicePixelRatio || 1, xRatio=iw/w, yRatio=ih/h, sRatio=1;			
		if(isResp) {                
			if((respDim=='width'&&lastW==iw) || (respDim=='height'&&lastH==ih)) {                    
				sRatio = lastS;                
			}				
			else if(!isScale) {					
				if(iw<w || ih<h)						
					sRatio = Math.min(xRatio, yRatio);				
			}				
			else if(scaleType==1) {					
				sRatio = Math.min(xRatio, yRatio);				
			}				
			else if(scaleType==2) {					
				sRatio = Math.max(xRatio, yRatio);				
			}			
		}
		domContainers[0].width = w * pRatio * sRatio;			
		domContainers[0].height = h * pRatio * sRatio;
		domContainers.forEach(function(container) {				
			container.style.width = w * sRatio + 'px';				
			container.style.height = h * sRatio + 'px';			
		});
		stage.scaleX = pRatio*sRatio;			
		stage.scaleY = pRatio*sRatio;
		lastW = iw; lastH = ih; lastS = sRatio;            
		stage.tickOnUpdate = false;            
		stage.update();            
		stage.tickOnUpdate = true;		
	}
}
function _updateVisibility(evt) {
	var parent = this.parent;
	var detach = this.stage == null || this._off || !parent;
	while(parent) {
		if(parent.visible) {
			parent = parent.parent;
		}
		else{
			detach = true;
			break;
		}
	}
	detach = detach && this._element && this._element._attached;
	if(detach) {
		this._element.detach();
		this.dispatchEvent('detached');
		stage.removeEventListener('drawstart', this._updateVisibilityCbk);
		this._updateVisibilityCbk = false;
	}
}
function _handleDrawEnd(evt) {
	if(this._element && this._element._attached) {
		var props = this.getConcatenatedDisplayProps(this._props), mat = props.matrix;
		var tx1 = mat.decompose(); var sx = tx1.scaleX; var sy = tx1.scaleY;
		var dp = window.devicePixelRatio || 1; var w = this.nominalBounds.width * sx; var h = this.nominalBounds.height * sy;
		mat.tx/=dp;mat.ty/=dp; mat.a/=(dp*sx);mat.b/=(dp*sx);mat.c/=(dp*sy);mat.d/=(dp*sy);
		this._element.setProperty('transform-origin', this.regX + 'px ' + this.regY + 'px');
		var x = (mat.tx + this.regX*mat.a + this.regY*mat.c - this.regX);
		var y = (mat.ty + this.regX*mat.b + this.regY*mat.d - this.regY);
		var tx = 'matrix(' + mat.a + ',' + mat.b + ',' + mat.c + ',' + mat.d + ',' + x + ',' + y + ')';
		this._element.setProperty('transform', tx);
		this._element.setProperty('width', w);
		this._element.setProperty('height', h);
		this._element.update();
	}
}

function _tick(evt) {
	var stage = this.stage;
	stage&&stage.on('drawend', this._handleDrawEnd, this, true);
	if(!this._updateVisibilityCbk) {
		this._updateVisibilityCbk = stage.on('drawstart', this._updateVisibility, this, false);
	}
}
function _componentDraw(ctx) {
	if(this._element && !this._element._attached) {
		this._element.attach($('#dom_overlay_container'));
		this.dispatchEvent('attached');
	}
}
an.handleSoundStreamOnTick = function(event) {
	if(!event.paused){
		var stageChild = stage.getChildAt(0);
		if(!stageChild.paused || stageChild.ignorePause){
			stageChild.syncStreamSounds();
		}
	}
}


})(createjs = createjs||{}, AdobeAn = AdobeAn||{});
var createjs, AdobeAn;